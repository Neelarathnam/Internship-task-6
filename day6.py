# -*- coding: utf-8 -*-
"""day6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CP97TCl8vSTclkGtsITA5RPQ3uVVjgFw
"""

# Step 1: Upload CSV file from local system
from google.colab import files
uploaded = files.upload()

#  Step 2: Load dataset
import pandas as pd
filename = list(uploaded.keys())[0]
df = pd.read_csv(filename)
print(" Dataset Loaded:\n")
print(df.head())

#  Step 3: Explore dataset
print("\n Dataset Info:")
print(df.info())
print("\n Summary Stats:")
print(df.describe())

#  Replace 'species' with your target column name if different
target_column = 'Species'

#  Step 4: Split features and target
X = df.drop(target_column, axis=1)
y = df[target_column]

#  Step 5: Encode target labels if needed
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

#  Step 6: Normalize features
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

#  Step 7: Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

#  Step 8: Try different K values
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

k_range = range(1, 21)
accuracies = []

for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    accuracies.append(acc)

#  Step 9: Plot Accuracy vs. K
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 5))
plt.plot(k_range, accuracies, marker='o', linestyle='--', color='b')
plt.title('Accuracy vs. K')
plt.xlabel('K Value')
plt.ylabel('Accuracy')
plt.grid(True)
plt.xticks(k_range)
plt.show()

#  Step 10: Train final model using best K
best_k = accuracies.index(max(accuracies)) + 1
print(f" Best K: {best_k}")

final_model = KNeighborsClassifier(n_neighbors=best_k)
final_model.fit(X_train, y_train)
y_pred = final_model.predict(X_test)

#  Step 11: Evaluate final model
from sklearn.metrics import confusion_matrix, classification_report

print("\n Final Accuracy:", accuracy_score(y_test, y_pred))
print("\n Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\n Classification Report:\n", classification_report(y_test, y_pred, target_names=le.classes_))